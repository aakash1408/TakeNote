pipeline {
    agent {
        docker {
            image 'golang:1.22-alpine'  // Use a Go Docker image
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket to access the host's Docker daemon
        }
    }

    environment {
        SONAR_URL = "http://3.88.64.40:9000"
        DOCKER_IMAGE = "vibranium1/takenote:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred') // Jenkins Docker registry credentials
        GITHUB_TOKEN = credentials('github-token') // GitHub credentials for updating deployment files
        SONAR_AUTH_TOKEN = credentials('sonarqube') // SonarQube authentication token
        PROJECT_KEY = "cicdproject"
    }

    stages {
        // Stage 1: Checkout the code
        stage('Checkout') {
            steps {
                sh 'echo "Checking out the code..."'
                git branch: 'main', url: 'https://github.com/aakash1408/TakeNote'
            }
        }

        // Stage 2: Build and Test the Go application
        stage('Build and Test') {
            steps {
                sh 'echo "Building and testing the Go application..."'
                sh 'go mod tidy'
                sh 'go test ./...'
            }
        }

        // Stage 3: Static Code Analysis with SonarQube
        stage('Static Code Analysis') {
            steps {
                sh 'echo "Running SonarQube analysis..."'
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh """
                    sonar-scanner \
                    -Dsonar.projectKey=${PROJECT_KEY} \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=${SONAR_URL} \
                    -Dsonar.login=${SONAR_AUTH_TOKEN}
                    """
                }
            }
        }

        // Stage 4: Build Docker image
        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh 'echo "Building the Docker image..."'
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                        dockerImage.push()
                    }
                }
            }
        }

        // Stage 5: Update Deployment File on GitHub
        stage('Update Deployment File') {
            environment {
            GIT_REPO_NAME = "TakeNote"
            GIT_USER_NAME = "aakash1408"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                    echo "Updating deployment file..."
                    git config user.email "aakash14082003@gmail.com"
                    git config user.name "aakash1408"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" k8s/manifests/deployment.yml
                    git add k8s/maifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean workspace after build
        }
        success {
            echo 'Pipeline executed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
